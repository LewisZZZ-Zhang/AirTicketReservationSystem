1.Home page
    1.1 View Public Information
    Use case: allow all users to search for flights based on city or flight number before logging in.
    Queries (done by using PROCEDURE):
    CALL customer_get_upcoming_flights(%s);

    DELIMITER //
    CREATE PROCEDURE customer_get_upcoming_flights(IN p_customer_email VARCHAR(50))
    BEGIN
        SELECT 
            t.ticket_id, 
            f.airline_name, 
            f.flight_num, 
            f.departure_airport, 
            f.arrival_airport, 
            f.departure_time, 
            f.arrival_time, 
            f.status, 
            f.price
        FROM Purchases p
        JOIN Ticket t ON p.ticket_id = t.ticket_id
        JOIN Flight f ON t.airline_name = f.airline_name AND t.flight_num = f.flight_num
        WHERE p.customer_email = p_customer_email AND f.status = 'Upcoming';
    END //
    DELIMITER ;

2. User Authentication
    2.1 Login
    Use Case: Allow users (customers, agents, staff) to log in.
    Queries:
        Customer Login:
        SELECT * FROM Customer WHERE email = %s AND password = %s;

        Agent Login:
        SELECT * FROM Booking_Agent WHERE email = %s AND password = %s;

        Staff Login:
        SELECT * FROM Airline_Staff WHERE username = %s AND password = %s;
        SELECT permission_type FROM Permission WHERE username = %s;

    2.2 Registration
    Use Case: Allow users (customers, agents, staff) to register.
    Queries:
        Customer Registration:
        INSERT INTO Customer (name, email, password, date_of_birth, building_number, street, city, state, phone_number, passport_number, passport_expiration, passport_country)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);

        Agent Registration:
        INSERT INTO Booking_Agent (email, password, booking_agent_id) VALUES (%s, %s, %s);

        Staff Registration:
        INSERT INTO Airline_Staff (username, password, first_name, last_name, date_of_birth, airline_name) VALUES (%s, %s, %s, %s, %s, %s);

3. Customer Use Cases
    2.1 Search and Purchase Flights
    Use Case: Allow customers to search for and purchase flights.
    Query:
        Serch: Same as view public information.
        Purchase:
            Check ticket availability:
            SELECT 
                a.seats - IFNULL(COUNT(p.ticket_id), 0) AS remaining_seats
            FROM flight f
            JOIN airplane a 
                ON f.airline_name = a.airline_name AND f.airplane_id = a.airplane_id
            LEFT JOIN ticket t 
                ON f.airline_name = t.airline_name AND f.flight_num = t.flight_num
            LEFT JOIN purchases p 
                ON t.ticket_id = p.ticket_id
            WHERE f.airline_name = %s AND f.flight_num = %s
            GROUP BY a.seats;

            Insert ticket and purchase:
            INSERT INTO ticket (ticket_id, airline_name, flight_num)
                VALUES (%s, %s, %s)

    2.2 View Ticket History
    Use Case: Allow customers to view their ticket purchase history.
    Query:
    SELECT 
            Ticket.ticket_id, 
            Flight.airline_name, 
            Flight.flight_num, 
            Flight.departure_airport, 
            Flight.arrival_airport, 
            Flight.departure_time, 
            Flight.arrival_time, 
            Flight.status, 
            Flight.price
        FROM Purchases
        JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
        JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
        WHERE Purchases.customer_email = %s

    2.3 Spending Analysis
    Use Case: Allow customers to view their spending over time.
    Queries:
        Total spending (default by the past 6 months):
            SELECT SUM(Flight.price) AS total_spent
        FROM Purchases
        JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
        JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
        WHERE Purchases.customer_email = %s
          AND DATE(Purchases.purchase_date) >= %s
          AND DATE(Purchases.purchase_date) <= %s
    
        
        Monthly spending:
            SELECT DATE_FORMAT(Purchases.purchase_date, '%Y-%m') AS month, SUM(Flight.price) AS monthly_spent
            FROM Purchases
            JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
            JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
            WHERE Purchases.customer_email = %s
                AND DATE(Purchases.purchase_date) >= %s
                AND DATE(Purchases.purchase_date) <= %s
            GROUP BY month
            ORDER BY month

4. Staff Use Cases
    4.1 Universal Functions
        4.1.1 View Flights
        Use Case: Allow staff to view flights for their airline.
        Query:
            SELECT 
                    Flight.airline_name, Flight.flight_num, Flight.departure_airport, 
                    Flight.arrival_airport, Flight.departure_time, Flight.arrival_time, 
                    Flight.status, Flight.price
            FROM Flight
            WHERE Flight.airline_name = %s
                AND DATE(Flight.departure_time) >= %s
                AND DATE(Flight.departure_time) <= %s
        
        4.1.2 View Top agents
        Use Case: Allow staff to view top agents working for the airline he works for.
        Query (using the 'by ticket sales during the past month' as an example):
            SELECT ba.email, ba.booking_agent_id, COUNT(p.ticket_id) as ticket_count
            FROM Booking_Agent ba
            JOIN Purchases p ON ba.booking_agent_id = p.booking_agent_id
            JOIN Ticket t ON p.ticket_id = t.ticket_id
            JOIN Flight f ON t.flight_num = f.flight_num AND t.airline_name = f.airline_name
            WHERE f.airline_name = %s 
            AND p.purchase_date >= %s
            GROUP BY ba.email, ba.booking_agent_id
            ORDER BY ticket_count DESC
            LIMIT 5
        
        4.1.3 View Most Frequent Customer
        Use Case: Query the most frequent customer in the last year
        Query:
            Showing the most frequent customer in the past year:
                SELECT 
                    Purchases.customer_email, 
                    COUNT(*) AS flight_count
                FROM Purchases
                JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
                JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
                WHERE Flight.airline_name = %s
                AND Purchases.purchase_date >= DATE_SUB(NOW(), INTERVAL 1 YEAR)
                GROUP BY Purchases.customer_email
                ORDER BY flight_count DESC
                LIMIT 1
            
            View flights taken by a customer:
                SELECT 
                    Flight.flight_num, Flight.departure_airport, Flight.arrival_airport, 
                    Flight.departure_time, Flight.arrival_time, Flight.status, Flight.price
                FROM Purchases
                JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
                JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
                WHERE Purchases.customer_email = %s
                  AND Flight.airline_name = %s
                ORDER BY Flight.departure_time
        
        4.1.4 View Ticket Sales
            Use Case: Allow staff to view ticket sales for their airline.
            Queries:
                Total tickets and revenue:
                    SELECT COUNT(*) AS total_tickets, SUM(Flight.price) AS total_revenue
                    FROM Purchases
                    JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
                    JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
                    WHERE Ticket.airline_name = %s
                    AND DATE(Purchases.purchase_date) BETWEEN %s AND %s;

                Monthly ticket sales:
                    SELECT DATE_FORMAT(Purchases.purchase_date, '%Y-%m') AS month, COUNT(*) AS tickets_sold
                    FROM Purchases
                    JOIN Ticket ON Purchases.ticket_id = Ticket.ticket_id
                    JOIN Flight ON Ticket.airline_name = Flight.airline_name AND Ticket.flight_num = Flight.flight_num
                    WHERE Ticket.airline_name = %s
                    AND DATE(Purchases.purchase_date) BETWEEN %s AND %s
                    GROUP BY month;
        
        4.1.5 View Earnings Analysis
        Use Case: Allow staff to analyze earnings from direct and indirect sales.
        Queries:
            Total earnings (direct and indirect):
                SELECT 
                SUM(CASE WHEN p.booking_agent_id IS NULL THEN f.price ELSE 0 END) AS direct_earnings,
                SUM(CASE WHEN p.booking_agent_id IS NOT NULL THEN f.price ELSE 0 END) AS indirect_earnings
                FROM Ticket t
                JOIN Purchases p ON t.ticket_id = p.ticket_id
                JOIN Flight f ON t.flight_num = f.flight_num
                WHERE t.airline_name = %s 
                AND p.purchase_date >= %s;
            
            Recent sales (direct and indirect):
                SELECT p.ticket_id, p.customer_email, p.purchase_date, f.price, ba.email AS agent_email
                FROM Purchases p
                JOIN Ticket t ON p.ticket_id = t.ticket_id
                JOIN Flight f ON t.flight_num = f.flight_num
                LEFT JOIN Booking_Agent ba ON p.booking_agent_id = ba.booking_agent_id
                WHERE t.airline_name = %s
                AND p.purchase_date >= %s
                ORDER BY p.purchase_date DESC;
        
        4.1.6 View Top Destinations
        Use Case: Allow staff to view the most popular destinations for their airline.
        Queries:
            Top destinations in the last 3 months:
                SELECT f.arrival_airport, COUNT(*) AS flight_count
                FROM Flight f
                JOIN Ticket t ON f.flight_num = t.flight_num AND f.airline_name = t.airline_name
                JOIN Purchases p ON t.ticket_id = p.ticket_id
                WHERE f.airline_name = %s
                AND p.purchase_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH)
                GROUP BY f.arrival_airport
                ORDER BY flight_count DESC
                LIMIT 5;
            
            Top destinations in the last year:
                SELECT f.arrival_airport, COUNT(*) AS flight_count
                FROM Flight f
                JOIN Ticket t ON f.flight_num = t.flight_num AND f.airline_name = t.airline_name
                JOIN Purchases p ON t.ticket_id = p.ticket_id
                WHERE f.airline_name = %s
                AND p.purchase_date >= DATE_SUB(NOW(), INTERVAL 1 YEAR)
                GROUP BY f.arrival_airport
                ORDER BY flight_count DESC
                LIMIT 5;
        
    4.2 Administrative Functions
        4.2.1 Create Flight
        Use Case: Allow staff with admin permissions to create new flights for their airline.
        Query:
            INSERT INTO Flight (airline_name, flight_num, departure_airport, arrival_airport, departure_time, arrival_time, airplane_id, price, status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, 'Upcoming');
        
        4.2.2 Manage Airplanes
        Use Case: Allow staff with admin permissions to add or remove airplanes for their airline.
        Queries:
            Add airplane:
                INSERT INTO Airplane (airline_name, airplane_id, seats)
                VALUES (%s, %s, %s);
            
            Remove airport:
                DELETE FROM Airplane WHERE airline_name = %s AND airplane_id = %s;
    